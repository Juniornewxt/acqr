package manipulaiso

import (

	//"encoding/csv"

	"bytes"
	"fmt"
	"os"
	"strings"
	"time"

	"github.com/moov-io/iso8583"
	//"github.com/moov-io/iso8583/cmd/iso8583/describe"
	"github.com/moov-io/iso8583/encoding"
	"github.com/moov-io/iso8583/field"
	"github.com/moov-io/iso8583/padding"
	"github.com/moov-io/iso8583/prefix"

	//"github.com/moov-io/iso8583/specs"
	"github.com/moov-io/iso8583/network"
	"github.com/moov-io/iso8583/sort"
)

func r_NewSpec() *iso8583.MessageSpec {
	return &iso8583.MessageSpec{
		Fields: map[int]field.Field{
			0: field.NewString(&field.Spec{
				Length:      4,
				Description: "MTI",
				Enc:         encoding.Binary,
				Pref:        prefix.ASCII.Fixed,
				//Pad:         padding.Left('0'),
			}),
			1: field.NewBitmap(&field.Spec{
				Description: "Bitmap",
				Enc:         encoding.Binary,
				Pref:        prefix.Hex.Fixed,
			}),
			2: field.NewString(&field.Spec{
				Length:      16,
				Description: "PAN - CARTAO",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.LL,
			}),
			3: field.NewNumeric(&field.Spec{
				Length:      6,
				Description: "CODIGO PROCESSAMENTO",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.Fixed,
				Pad:         padding.Left('0'),
			}),
			4: field.NewNumeric(&field.Spec{
				Length:      12,
				Description: "VALOR DA TRANSACAO",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.Fixed,
				Pad:         padding.Left('0'),
			}),
			7: field.NewNumeric(&field.Spec{
				Length:      10,
				Description: "DATA HORA GMT TRANSMISSAO",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.Fixed,
				Pad:         padding.Left('0'),
			}),
			11: field.NewNumeric(&field.Spec{
				Length:      6,
				Description: "DE011",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.Fixed,
				Pad:         padding.Left('0'),
			}),
			12: field.NewNumeric(&field.Spec{
				Length:      6,
				Description: "HORA LOCAL TRANSACAO",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.Fixed,
				Pad:         padding.Left('0'),
			}),
			13: field.NewNumeric(&field.Spec{
				Length:      4,
				Description: "DATA LOCAL TRANSACAO",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.Fixed,
				Pad:         padding.Left('0'),
			}),
			14: field.NewNumeric(&field.Spec{
				Length:      4,
				Description: "VALIDADE",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.Fixed,
				Pad:         padding.Left('0'),
			}),
			18: field.NewNumeric(&field.Spec{
				Length:      4,
				Description: "MCC",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.Fixed,
				Pad:         padding.Left('0'),
			}),
			19: field.NewNumeric(&field.Spec{
				Length:      3,
				Description: "DE19",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.Fixed,
				Pad:         padding.Left('0'),
			}),
			22: field.NewNumeric(&field.Spec{
				Length:      3,
				Description: "ENTRY MODE",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.Fixed,
				Pad:         padding.Left('0'),
			}),
			23: field.NewNumeric(&field.Spec{
				Length:      3,
				Description: "DE23",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.Fixed,
				Pad:         padding.Left('0'),
			}),
			24: field.NewNumeric(&field.Spec{
				Length:      3,
				Description: "DE24",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.Fixed,
				Pad:         padding.Left('0'),
			}),
			32: field.NewString(&field.Spec{
				Length:      11,
				Description: "CODIGO ADQUIRENTE",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.LL,
			}),
			35: field.NewString(&field.Spec{
				Length:      37,
				Description: "TRILHA 2",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.LL,
			}),
			37: field.NewString(&field.Spec{
				Length:      12,
				Description: "NSU",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.Fixed,
				Pad:         padding.Left('0'),
			}),
			38: field.NewNumeric(&field.Spec{
				Length:      6,
				Description: "CODIGO DE AUTORIZACAO",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.Fixed,
				Pad:         padding.Left('0'),
			}),
			39: field.NewString(&field.Spec{
				Length:      2,
				Description: "CODIGO RESPOSTA",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.Fixed,
				Pad:         padding.Left('0'),
			}),
			41: field.NewString(&field.Spec{
				Length:      8,
				Description: "TERMINAL",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.Fixed,
			}),
			42: field.NewString(&field.Spec{
				Length:      15,
				Description: "CODIGO DO EC",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.Fixed,
			}),
			43: field.NewString(&field.Spec{
				Length:      40,
				Description: "DADOS EC",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.Fixed,
			}),
			46: field.NewString(&field.Spec{
				Length:      999,
				Description: "Identificador do Cartao -CVE2",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.LLL,
			}),
			48: field.NewString(&field.Spec{
				Length:      999,
				Description: "Informacoes adicionais de solic resp",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.LLL,
			}),
			49: field.NewNumeric(&field.Spec{
				Length:      3,
				Description: "CODIGO DE MOEDA",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.Fixed,
				Pad:         padding.Left('0'),
			}),
			52: field.NewString(&field.Spec{
				Length:      16,
				Description: "SENHA CRIPTOGRAFADA",
				Enc:         encoding.Binary,
				Pref:        prefix.ASCII.Fixed,
			}),
			55: field.NewString(&field.Spec{
				Length:      999,
				Description: "DADOS CHIP",
				Enc:         encoding.Binary,
				Pref:        prefix.ASCII.LLL,
			}),
			58: field.NewString(&field.Spec{
				Length:      60,
				Description: "DE58",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.LLL,
			}),
			60: field.NewString(&field.Spec{
				Length:      999,
				Description: "DE60",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.LLL,
			}),
			61: field.NewString(&field.Spec{
				Length:      999,
				Description: "Point-of-Service [POS] Data",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.LLL,
			}),
			62: field.NewString(&field.Spec{
				Length:      999,
				Description: "Dados para Identificar",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.LLL,
			}),
			//	124: field.NewString(&field.Spec{
			//		Length:      124,
			//		Description: "DE124",
			//		Enc:         encoding.ASCII,
			//		Pref:        prefix.ASCII.LLL,
			//	}),
			120: field.NewString(&field.Spec{
				Length:      999,
				Description: "DADOS COMPLEMENTARES TRANSACAO",
				Enc:         encoding.Binary,
				Pref:        prefix.ASCII.LLL,
			}),
			126: field.NewString(&field.Spec{
				Length:      999,
				Description: "Identificador do Cartao -CVE2",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.LLL,
			}),
			127: field.NewString(&field.Spec{
				Length:      999,
				Description: "DE127",
				Enc:         encoding.ASCII,
				Pref:        prefix.ASCII.LLL,
			}),
		},
	}

}

func NewSpec() *iso8583.MessageSpec {
	return &iso8583.MessageSpec{
		Fields: map[int]field.Field{
			0: field.NewString(&field.Spec{
				Length:      4,
				Description: "MTI",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
				//Pad:         padding.Left('0'),
			}),
			1: field.NewBitmap(&field.Spec{
				Description: "Bitmap",
				Enc:         encoding.Binary,
				Pref:        prefix.Hex.Fixed,
			}),
			2: field.NewString(&field.Spec{
				Length:      16,
				Description: "PAN - CARTAO",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.LL,
			}),
			3: field.NewNumeric(&field.Spec{
				Length:      6,
				Description: "CODIGO PROCESSAMENTO",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
				Pad:         padding.Left('0'),
			}),
			4: field.NewNumeric(&field.Spec{
				Length:      12,
				Description: "VALOR DA TRANSACAO",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
				Pad:         padding.Left('0'),
			}),
			5: field.NewNumeric(&field.Spec{
				Length:      12,
				Description: "VALOR DA TRANSACAO AGENDA",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
				Pad:         padding.Left('0'),
			}),
			6: field.NewNumeric(&field.Spec{
				Length:      12,
				Description: "VALOR DA TRANSACAO CARDHOLDER",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
				Pad:         padding.Left('0'),
			}),
			7: field.NewNumeric(&field.Spec{
				Length:      10,
				Description: "DATA HORA GMT TRANSMISSAO",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
				Pad:         padding.Left('0'),
			}),
			9: field.NewNumeric(&field.Spec{
				Length:      8,
				Description: "CONVERSAO AGENDA",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
				Pad:         padding.Left('0'),
			}),
			10: field.NewNumeric(&field.Spec{
				Length:      8,
				Description: "CONVERSAO CARD HOLDER",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
				Pad:         padding.Left('0'),
			}),
			11: field.NewNumeric(&field.Spec{
				Length:      6,
				Description: "DE011",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
				Pad:         padding.Left('0'),
			}),
			12: field.NewNumeric(&field.Spec{
				Length:      6,
				Description: "HORA LOCAL TRANSACAO",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
				Pad:         padding.Left('0'),
			}),
			13: field.NewNumeric(&field.Spec{
				Length:      4,
				Description: "DATA LOCAL TRANSACAO",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
				Pad:         padding.Left('0'),
			}),
			14: field.NewNumeric(&field.Spec{
				Length:      4,
				Description: "VALIDADE",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
				Pad:         padding.Left('0'),
			}),
			15: field.NewNumeric(&field.Spec{
				Length:      4,
				Description: "DATA AGENDA",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
				Pad:         padding.Left('0'),
			}),
			16: field.NewNumeric(&field.Spec{
				Length:      4,
				Description: "DATA CONVERSAO",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
				Pad:         padding.Left('0'),
			}),
			18: field.NewNumeric(&field.Spec{
				Length:      4,
				Description: "MCC",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
				Pad:         padding.Left('0'),
			}),
			19: field.NewNumeric(&field.Spec{
				Length:      3,
				Description: "DE19",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
				Pad:         padding.Left('0'),
			}),
			22: field.NewNumeric(&field.Spec{
				Length:      3,
				Description: "ENTRY MODE",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
				Pad:         padding.Left('0'),
			}),
			23: field.NewNumeric(&field.Spec{
				Length:      3,
				Description: "DE23",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
				Pad:         padding.Left('0'),
			}),
			24: field.NewNumeric(&field.Spec{
				Length:      3,
				Description: "DE24",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
				Pad:         padding.Left('0'),
			}),
			32: field.NewString(&field.Spec{
				Length:      11,
				Description: "CODIGO ADQUIRENTE",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.LL,
			}),
			33: field.NewString(&field.Spec{
				Length:      6,
				Description: "Forwarding Institution ID Code",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.LL,
				Pad:         padding.Left('0'),
			}),
			35: field.NewString(&field.Spec{
				Length:      37,
				Description: "TRILHA 2",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.LL,
			}),
			37: field.NewString(&field.Spec{
				Length:      12,
				Description: "NSU",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
				Pad:         padding.Left('0'),
			}),
			38: field.NewNumeric(&field.Spec{
				Length:      6,
				Description: "CODIGO DE AUTORIZACAO",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
				Pad:         padding.Left('0'),
			}),
			39: field.NewString(&field.Spec{
				Length:      2,
				Description: "CODIGO RESPOSTA",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
				Pad:         padding.Left('0'),
			}),
			41: field.NewString(&field.Spec{
				Length:      8,
				Description: "TERMINAL",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
			}),
			42: field.NewString(&field.Spec{
				Length:      15,
				Description: "CODIGO DO EC",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
			}),
			43: field.NewString(&field.Spec{
				Length:      40,
				Description: "DADOS EC",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
			}),
			46: field.NewString(&field.Spec{
				Length:      999,
				Description: "Identificador do Cartao -CVE2",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.LLL,
			}),
			477: field.NewComposite(&field.Spec{
				Length:      999,
				Description: "Informacoes adicionais de solic resp",
				Pref:        prefix.EBCDIC.LLL,
				Tag: &field.TagSpec{
					//Length: 2,
					//Enc:  encoding.EBCDIC,
					Sort: sort.StringsByInt,
				},
				Subfields: map[string]field.Field{
					"00": field.NewString(&field.Spec{
						Length:      1,
						Description: "TCC",
						Pref:        prefix.EBCDIC.Fixed,
						Enc:         encoding.EBCDIC,
					}),
					"14": field.NewString(&field.Spec{
						Length:      5,
						Description: "ATI",
						Pref:        prefix.EBCDIC.LL,
						Enc:         encoding.EBCDIC,
					}),
					"74": field.NewString(&field.Spec{
						Length:      3,
						Description: "API",
						Pref:        prefix.EBCDIC.LL,
						Enc:         encoding.EBCDIC,
					}),
					"80": field.NewString(&field.Spec{
						Length:      2,
						Description: "PSC",
						Pref:        prefix.EBCDIC.LL,
						Enc:         encoding.EBCDIC,
					}),
				},
			}),

			48: field.NewComposite(&field.Spec{
				Length:      999,
				Description: "INFO ADD",
				Pref:        prefix.EBCDIC.LLL,
				Tag: &field.TagSpec{
					//Length: 1,
					//Enc:  encoding.EBCDIC,
					Sort: sort.StringsByInt,
				},
				Subfields: map[string]field.Field{
					"00": field.NewString(&field.Spec{
						Length:      1,
						Description: "TCC",
						Enc:         encoding.EBCDIC,
						Pref:        prefix.EBCDIC.Fixed,
					}),
					"01": field.NewComposite(&field.Spec{
						Length:      999,
						Description: "Composite",
						Pref:        prefix.EBCDIC.Fixed,
						Tag: &field.TagSpec{
							Enc:  encoding.EBCDIC,
							Sort: sort.StringsByInt,
						},
						Subfields: map[string]field.Field{
							"14": field.NewString(&field.Spec{
								Length:      5,
								Description: "ATI",
								Enc:         encoding.EBCDIC,
								Pref:        prefix.EBCDIC.LL,
							}),
							"22": field.NewString(&field.Spec{
								Length:      34,
								Description: "INSTALL",
								Enc:         encoding.EBCDIC,
								Pref:        prefix.EBCDIC.LL,
							}),
							"74": field.NewString(&field.Spec{
								Description: "API",
								Length:      3,
								Enc:         encoding.EBCDIC,
								Pref:        prefix.EBCDIC.LL,
							}),
							"80": field.NewString(&field.Spec{
								Length:      2,
								Description: "PSC",
								Enc:         encoding.EBCDIC,
								Pref:        prefix.EBCDIC.LL,
							}),
							"91": field.NewString(&field.Spec{
								Length:      15,
								Description: "ARD",
								Enc:         encoding.EBCDIC,
								Pref:        prefix.EBCDIC.LL,
							}),
						},
					}),
				},
			}),
			49: field.NewNumeric(&field.Spec{
				Length:      3,
				Description: "CODIGO DE MOEDA",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
				Pad:         padding.Left('0'),
			}),
			50: field.NewNumeric(&field.Spec{
				Length:      3,
				Description: "MOEDA DE AGENDA",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
				Pad:         padding.Left('0'),
			}),
			51: field.NewNumeric(&field.Spec{
				Length:      3,
				Description: "MOEDA CARDHOLDER",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.Fixed,
				Pad:         padding.Left('0'),
			}),
			52: field.NewString(&field.Spec{
				Length:      8,
				Description: "SENHA CRIPTOGRAFADA",
				Enc:         encoding.Binary,
				Pref:        prefix.EBCDIC.Fixed,
			}),
			55: field.NewString(&field.Spec{
				Length:      999,
				Description: "ICC Data – EMV Having Multiple Tags",
				Enc:         encoding.Binary,
				Pref:        prefix.EBCDIC.LLL,
			}),
			56: field.NewString(&field.Spec{
				Length:      37,
				Description: "CONTA DE PAGAMENTO",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.LLL,
			}),
			58: field.NewString(&field.Spec{
				Length:      60,
				Description: "DE58",
				Enc:         encoding.Binary,
				Pref:        prefix.EBCDIC.LLL,
			}),
			60: field.NewString(&field.Spec{
				Length:      999,
				Description: "DE60",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.LLL,
			}),
			61: field.NewString(&field.Spec{
				Length:      999,
				Description: "Point-of-Service [POS] Data",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.LLL,
			}),
			62: field.NewString(&field.Spec{
				Length:      999,
				Description: "Dados para Identificar",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.LLL,
			}),
			63: field.NewString(&field.Spec{
				Length:      9,
				Description: "DADOS DE REDE",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.LLL,
			}),
			//	124: field.NewString(&field.Spec{
			//		Length:      124,
			//		Description: "DE124",
			//		Enc:         encoding.ASCII,
			//		Pref:        prefix.ASCII.LLL,
			//	}),
			120: field.NewString(&field.Spec{
				Length:      999,
				Description: "DADOS COMPLEMENTARES TRANSACAO",
				Enc:         encoding.Binary,
				Pref:        prefix.EBCDIC.LLL,
			}),
			126: field.NewString(&field.Spec{
				Length:      999,
				Description: "Identificador do Cartao -CVE2",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.LLL,
			}),
			127: field.NewString(&field.Spec{
				Length:      999,
				Description: "DE127",
				Enc:         encoding.EBCDIC,
				Pref:        prefix.EBCDIC.LLL,
			}),
		},
	}

}

func Mciso(iso_padrao []byte) ([]byte, error) {

	// 1 se renomeia a iso criada acima com pacote iso_padrao

	fmt.Println("PRINT DA FUNCAO MC", iso_padrao)

	// Remove os primeiros 2 bytes
	iso_padrao_mod := iso_padrao[2:]
	// Trabalha com string sem os 2 primeiros bytes
	retorno := string(iso_padrao_mod)

	r_spec := r_NewSpec()

	r_message := iso8583.NewMessage(r_spec)

	r_message.Unpack([]byte((retorno)))

	b, err := r_message.Pack()
	if err != nil {
		panic(err)

	}
	fmt.Printf("\n MENSAGEM RECEBIDA:\n")
	fmt.Printf("% x\n", b)
	fmt.Printf("\n MENSAGEM ABERTA ASCII:\n")
	iso8583.Describe(r_message, os.Stdout)

	// Inicia a criação da spec nova para que não se repita os dados da ISO original, salve quando solicitado r_message
	new_spec := NewSpec()

	new_message := iso8583.NewMessage(new_spec)

	r_message.Unpack(b) //Abre a ISO formatada no inicio para ser usada somente de alguns campos
	//new_message.MTI("0100") //587
	//pan, err := r_message.GetString(2)
	//if err != nil {
	//	panic(err)
	//}
	new_message.MTI("0100")
	//new_message.Field(2, pan) //pan
	proccod, err := r_message.GetString(3)
	if err != nil {
		panic(err)
	}
	new_message.Field(3, proccod) //proc code
	valor, err := r_message.GetString(4)
	if err != nil {
		panic(err)
	}
	new_message.Field(4, valor) //valor
	mmddhhmmss, err := r_message.GetString(7)
	if err != nil {
		panic(err)
	}
	new_message.Field(7, mmddhhmmss) //data e hora mmddhhmmss
	sy_trace, err := r_message.GetString(11)
	if err != nil {
		panic(err)
	}
	new_message.Field(11, sy_trace)
	hhmmss, err := r_message.GetString(12)
	if err != nil {
		panic(err)
	}
	new_message.Field(12, hhmmss) //hhmmss
	mmdd, err := r_message.GetString(13)
	if err != nil {
		panic(err)
	}
	new_message.Field(13, mmdd) //mmdd
	validade, err := r_message.GetString(14)
	if err != nil {
		panic(err)
	}
	new_message.Field(14, validade) //validade do cartao
	mcc, err := r_message.GetString(18)
	if err != nil {
		panic(err)
	}
	new_message.Field(18, mcc) //mcc
	//message.Field(19, dados.pais)              //pais
	entrymode, err := r_message.GetString(22)
	if err != nil {
		panic(err)
	}
	new_message.Field(22, entrymode) //entry mode
	if entrymode == "51" {
		new_message.Field(23, "000")
	}
	new_message.Field(24, "100")
	//new_message.Field(25, "00") //reason code
	//message.Field(26, "53") //CardAcceptorBusinessCode
	//message.Field(28, "000000000") //Amount, Transaction Fee
	new_message.Field(32, "00000000025") //adquirente
	//acqr, err := r_message.GetString(32)
	//if err != nil {
	//	panic(err)
	//}
	//new_message.Field(32, acqr)
	//message.Field(33, "0026") //Forwarding Institution ID Code

	//new_message.Field(35, dados.cartao+"="+dados.validade+"2011721530300000")             // trilha 2 cartao/ identificador/ validade/ cvv
	if entrymode == "10" || entrymode == "21" {
		trilha2, err := r_message.GetString(35)
		if err != nil {
			panic(err)
		}
		new_message.Field(35, trilha2) // trilha 2 cartao/ identificador/ validade/ cvv
	}
	//nsu, err := r_message.GetString(37)
	//if err != nil {
	//	panic(err)
	//}
	//new_message.Field(37, strings.Replace((data.Format(("150405.000000"))), ".", "", -1)) //nsu
	//new_message.Field(37, nsu) //nsu
	data := time.Now()
	new_message.Field(37, strings.Replace((data.Format(("150405.000000"))), ".", "", -1))
	//new_message.Field(41, "JUNI0SIM")        //terminal
	tid, err := r_message.GetString(41)
	if err != nil {
		panic(err)
	}
	new_message.Field(41, tid) //terminal
	//new_message.Field(42, "000001020116592") //cod comercio
	mid, err := r_message.GetString(42)
	if err != nil {
		panic(err)
	}
	//fmt.Println("Terminal:", tid)
	//fmt.Println("comercio:", mid)
	new_message.Field(42, mid) //cod comercio
	new_message.Field(43, "POSTO DM JR            DIADEMA  EVANG076")
	//anl, err := r_message.GetString(43)
	//if err != nil {
	//	panic(err)
	//}
	//new_message.Field(43, anl) // Endereço do EC
	//new_message.Field(48, "0030020100503324264F3F2398092FB0000000000000000009008MACNINJA010013TESTE1AAAA1 E012014MTIP50 MCD 16A")
	//ddadc, err := r_message.GetString(48)
	//if err != nil {
	//	panic(err)
	//}
	//new_message.Field(48, ddadc) //48 esta com problema no simulador neapay precisa saber que ele espera
	moeda, err := r_message.GetString(49)
	if err != nil {
		panic(err)
	}
	new_message.Field(49, moeda) //moeda
	//message.Field(51, dados.moeda) //moeda
	//message.Field(52, dados.senha) //senha
	//new_message.Field(52, "FEE8CA6A604F09F0") //senha
	//pin, err := r_message.GetString(52)
	//if err != nil {
	//	panic(err)
	//}
	new_message.Field(52, "12345678") //senha
	if entrymode == "51" {
		new_message.Field(55, "FF208D820279009F2701809F2608350C8A55B14CDDD59F36020050950500000480009F34034203009F370434DB61379F3303E0F0C85F280201249F10120110A00000000000DAC000000000000000FF9A032406199F1A0200769F3501229C01008407A00000000410109F02060000000020005F2A0209869F120A4D617374657243617264500A4D415354455243415244")
	}
	//	message.Field(55, "5F2A020986820258009505228000E0009A032009289C01009F02060000000300009F03060000000000009F10200FA501A038F8000000000000000000000F0000000000000000000000000000009F1A0200769F260844B73875FBJ9E9D69F2701809F3303E0D0C89F360200C89F370485B6B1CB9F34034103029F350122")
	//message.Field(58, "AV DO MACACO NINJA   3039705000076                          ")
	//message.Field(60, "32025100000M00")
	//new_message.Field(61, "001008GP0104AD0020086R557961003026000000000030007603015000  004016000001.47 210223005003PAX006004S9200070086R557961")
	posdata, err := r_message.GetString(61)
	if err != nil {
		panic(err)
	}
	new_message.Field(61, posdata)
	//message.Field(62, "6*TID02012345678901234567890*ECI00207")
	// message.Field(124, "                                                                                                                            ")
	//message.Field(126, "51397 ")
	//message.Field(127, "512222")
	// set your values
	d, err := new_message.Pack()
	if err != nil {
		panic(err)

	}

	// 1 se renomeia a iso criada acima com pacote b
	packed := d

	// 2 se criar o cabeçalho binario 2 byts
	header := network.NewBinary2BytesHeader()
	//header := network.NewASCII4BytesHeader()
	header.SetLength(len(packed))

	// 3 se criar o tpdu ELO
	//tpdu := []byte("60 00 06 00 00")

	// 4 - combinar tudo o que temos em um buf

	var buf bytes.Buffer

	header.WriteTo(&buf)
	//_, err = buf.Write(tpdu)
	_, err = buf.Write(packed)
	//_, err = Write(buf.Bytes())
	fmt.Printf("\n MENSAGEM ABERTA EBCDIC:\n")
	fmt.Printf("% x\n", packed)
	iso8583.Describe(new_message, os.Stdout)
	fmt.Printf("\n FIM DO PROCESSAMENTO :) \n")
	//fmt.Println("Pressione 'Enter' para sair...")
	//fmt.Scanln()
	//conn.Close()
	fmt.Println("\n MENSAGEM EBCDIC ENVIADA AO SERVIDOR:\n", buf.Bytes())
	return buf.Bytes(), err
}
