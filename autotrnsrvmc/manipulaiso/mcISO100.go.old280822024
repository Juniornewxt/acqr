package manipulaiso

import (

	//"encoding/csv"

	"bytes"
	"fmt"
	"os"
	especificacao "projetoacqr/especificao"
	"strings"
	"time"

	"github.com/moov-io/iso8583"
	//"github.com/moov-io/iso8583/cmd/iso8583/describe"

	//"github.com/moov-io/iso8583/specs"
	"github.com/moov-io/iso8583/network"
)

func Mciso100(iso_padrao []byte) ([]byte, error) {

	// 1 se renomeia a iso criada acima com pacote iso_padrao

	fmt.Println("PRINT DA FUNCAO MC", iso_padrao)

	// Remove os primeiros 2 bytes
	iso_padrao_mod := iso_padrao[2:]
	// Trabalha com string sem os 2 primeiros bytes
	retorno := string(iso_padrao_mod)

	r_spec := especificacao.NewSpecASCII()

	r_message := iso8583.NewMessage(r_spec)

	r_message.Unpack([]byte((retorno)))

	b, err := r_message.Pack()
	if err != nil {
		panic(err)

	}
	fmt.Printf("\n MENSAGEM RECEBIDA:\n")
	fmt.Printf("% x\n", b)
	fmt.Printf("\n MENSAGEM ABERTA ASCII:\n")
	iso8583.Describe(r_message, os.Stdout)

	// Inicia a criação da spec nova para que não se repita os dados da ISO original, salve quando solicitado r_message
	type IsoDe48sub struct {
		//MerchantName1        string `iso8583:"01"`
		MerchantCategoryCode string `iso8583:"14"`
		//Sub48_22i            *De48sub22 `iso8583:"22"`
		Sub48_22i          string `iso8583:"22"`
		MerchantPostalCode string `iso8583:"74"`
		MerchantWebsite    string `iso8583:"80"`
		Ard                string `iso8583:"91"`
	}
	type IsoDe48 struct {
		MerchantName1 string      `iso8583:"00"`
		MerchantName  *IsoDe48sub `iso8583:"01"`
	}
	type SolicitacaoAutorizacao struct {
		MTI               string   `iso8583:"0"`
		PAN               string   `iso8583:"2"`
		ProcCod           string   `iso8583:"3"`
		Valor             string   `iso8583:"4"`
		DataHoraTransacao string   `iso8583:"7"`
		STAN              string   `iso8583:"11"`
		Hhmmss            string   `iso8583:"12"`
		Mmdd              string   `iso8583:"13"`
		Validade          string   `iso8583:"14"`
		Mcc               string   `iso8583:"18"`
		EntryMode         string   `iso8583:"22"`
		SeqCardNum        string   `iso8583:"23"`
		Adquirente        string   `iso8583:"32"`
		CodInstiRemetente string   `iso8583:"33"`
		Trilha2           string   `iso8583:"35"`
		Nsu               string   `iso8583:"37"`
		Terminal          string   `iso8583:"41"`
		CodComercio       string   `iso8583:"42"`
		NomeEndereco      string   `iso8583:"43"`
		InfoAdd           *IsoDe48 `iso8583:"48"`
		Moeda             string   `iso8583:"49"`
		Pin               string   `iso8583:"52"`
		DadosChip         string   `iso8583:"55"`
		DadosPOS          string   `iso8583:"61"`
		DadosRegistro     string   `iso8583:"120"`
		DadosPrivados     string   `iso8583:"126"`
	}

	new_spec := especificacao.NewSpecEBCDIC()

	new_message := iso8583.NewMessage(new_spec)

	r_message.Unpack(b) //Abre a ISO formatada no inicio para ser usada somente de alguns campos

	cartao, err := r_message.GetString(35)
	if err != nil {
		panic(err)
	}
	//Abre o DE 35, le ate = para encontrar o numero do cartão
	var num_cartao string
	for _, procura_cartao := range cartao {
		if procura_cartao == '=' {
			break
		}
		num_cartao += string(procura_cartao)
	}

	proccod, err := r_message.GetString(3)
	if err != nil {
		panic(err)
	}

	valor, err := r_message.GetString(4)
	if err != nil {
		panic(err)
	}
	mmddhhmmss, err := r_message.GetString(7)
	if err != nil {
		panic(err)
	}
	//new_message.Field(7, mmddhhmmss) //data e hora mmddhhmmss
	sy_trace, err := r_message.GetString(11)
	if err != nil {
		panic(err)
	}
	//new_message.Field(11, sy_trace)
	hhmmss, err := r_message.GetString(12)
	if err != nil {
		panic(err)
	}
	//new_message.Field(12, hhmmss) //hhmmss
	mmdd, err := r_message.GetString(13)
	if err != nil {
		panic(err)
	}
	//new_message.Field(13, mmdd) //mmdd
	validade, err := r_message.GetString(14)
	if err != nil {
		panic(err)
	}
	//new_message.Field(14, validade) //validade do cartao
	mcc, err := r_message.GetString(18)
	if err != nil {
		panic(err)
	}
	//new_message.Field(18, mcc) //mcc
	entrymode, err := r_message.GetString(22)
	if err != nil {
		panic(err)
	}
	//new_message.Field(22, entrymode) //entry mode
	trilha2, err := r_message.GetString(35)
	if err != nil {
		panic(err)
	}
	//new_message.Field(35, trilha2) // trilha 2 cartao/ identificador/ validade/ cvv
	data := time.Now()
	//new_message.Field(37, strings.Replace((data.Format(("150405.000000"))), ".", "", -1))
	tid, err := r_message.GetString(41)
	if err != nil {
		panic(err)
	}
	//new_message.Field(41, tid) //terminal
	mid, err := r_message.GetString(42)
	if err != nil {
		panic(err)
	}
	//new_message.Field(42, mid) //cod comercio
	//new_message.Field(43, "POSTO DM JR            DIADEMA  EVANG076")
	moeda, err := r_message.GetString(49)
	if err != nil {
		panic(err)
	}
	//new_message.Field(49, moeda) //moeda
	de55, err := r_message.GetString(55)
	if err != nil {
		panic(err)
	}
	//new_message.Field(55, de55) //dados do chip
	posdata, err := r_message.GetString(61)
	if err != nil {
		panic(err)
	}
	//new_message.Field(61, posdata)
	//De120, err := r_message.GetString(120)
	//if err != nil {
	//	panic(err)
	//}
	//new_message.Field(120, De120)
	//De126, err := r_message.GetString(126)
	//if err != nil {
	//	panic(err)
	//}
	//new_message.Field(126, De126)

	err = new_message.Marshal(&SolicitacaoAutorizacao{
		MTI:               "0100",
		PAN:               num_cartao,
		ProcCod:           proccod,
		Valor:             valor,
		DataHoraTransacao: mmddhhmmss,
		STAN:              sy_trace,
		Hhmmss:            hhmmss,
		Mmdd:              mmdd,
		Validade:          validade,
		Mcc:               mcc,
		EntryMode:         entrymode,
		SeqCardNum:        "001",
		Adquirente:        "00000000025",
		CodInstiRemetente: "0026",
		Trilha2:           trilha2,
		Nsu:               (strings.Replace((data.Format(("150405.000000"))), ".", "", -1)),
		Terminal:          tid,
		CodComercio:       mid,
		NomeEndereco:      "POSTO DM JR            DIADEMA  EVANG076",
		InfoAdd: &IsoDe48{
			MerchantName1: "F",
			MerchantName:  &IsoDe48sub{
				//MerchantCategoryCode: " ",
				//Sub48_22i: &De48sub22{
				//Sub48_22: "0000",
				//Sub48_22i: "0000000000000000000000000000000000",
				//},
				//MerchantPostalCode: "50C",
				//MerchantWebsite:    "TV",
				//Ard:                "111111111111111",
			},
		},
		//},
		Moeda:     moeda,
		Pin:       "FEE8CA6A",
		DadosChip: de55,
		DadosPOS:  posdata,
		//DadosRegistro: De120,
		//DadosPrivados: De126,
	})

	//message.Field(19, dados.pais)              //pais
	//if entrymode == "51" {
	//	new_message.Field(23, "000")
	//}
	//new_message.Field(24, "100")
	//new_message.Field(25, "00") //reason code
	//message.Field(26, "53") //CardAcceptorBusinessCode
	//message.Field(28, "000000000") //Amount, Transaction Fee
	//new_message.Field(32, "00000000025") //adquirente
	//acqr, err := r_message.GetString(32)
	//if err != nil {
	//	panic(err)
	//}
	//new_message.Field(32, acqr)
	//message.Field(33, "0026") //Forwarding Institution ID Code

	//new_message.Field(35, dados.cartao+"="+dados.validade+"2011721530300000")             // trilha 2 cartao/ identificador/ validade/ cvv
	//if entrymode == "10" || entrymode == "21" {
	//	trilha2, err := r_message.GetString(35)
	//	if err != nil {
	//		panic(err)
	//	}
	//	new_message.Field(35, trilha2) // trilha 2 cartao/ identificador/ validade/ cvv
	//}
	//nsu, err := r_message.GetString(37)
	//if err != nil {
	//	panic(err)
	//}
	//new_message.Field(37, strings.Replace((data.Format(("150405.000000"))), ".", "", -1)) //nsu
	//new_message.Field(37, nsu) //nsu
	//new_message.Field(41, "JUNI0SIM")        //terminal

	//new_message.Field(42, "000001020116592") //cod comercio
	//anl, err := r_message.GetString(43)
	//if err != nil {
	//	panic(err)
	//}
	//new_message.Field(43, anl) // Endereço do EC
	//new_message.Field(48, "0030020100503324264F3F2398092FB0000000000000000009008MACNINJA010013TESTE1AAAA1 E012014MTIP50 MCD 16A")
	//ddadc, err := r_message.GetString(48)
	//if err != nil {
	//	panic(err)
	//}
	//new_message.Field(48, ddadc) //48 esta com problema no simulador neapay precisa saber que ele espera
	//message.Field(51, dados.moeda) //moeda
	//message.Field(52, dados.senha) //senha
	//new_message.Field(52, "FEE8CA6A604F09F0") //senha
	//pin, err := r_message.GetString(52)
	//if err != nil {
	//	panic(err)
	//}
	//new_message.Field(52, "12345678") //senha
	//if entrymode == "51" {
	//	new_message.Field(55, "FF208D820279009F2701809F2608350C8A55B14CDDD59F36020050950500000480009F34034203009F370434DB61379F3303E0F0C85F280201249F10120110A00000000000DAC000000000000000FF9A032406199F1A0200769F3501229C01008407A00000000410109F02060000000020005F2A0209869F120A4D617374657243617264500A4D415354455243415244")
	//}
	//	message.Field(55, "5F2A020986820258009505228000E0009A032009289C01009F02060000000300009F03060000000000009F10200FA501A038F8000000000000000000000F0000000000000000000000000000009F1A0200769F260844B73875FBJ9E9D69F2701809F3303E0D0C89F360200C89F370485B6B1CB9F34034103029F350122")
	//message.Field(58, "AV DO MACACO NINJA   3039705000076                          ")
	//message.Field(60, "32025100000M00")
	//new_message.Field(61, "001008GP0104AD0020086R557961003026000000000030007603015000  004016000001.47 210223005003PAX006004S9200070086R557961")

	//message.Field(62, "6*TID02012345678901234567890*ECI00207")
	// message.Field(124, "                                                                                                                            ")
	//message.Field(126, "51397 ")
	//message.Field(127, "512222")
	// set your values
	d, err := new_message.Pack()
	if err != nil {
		panic(err)

	}

	// 1 se renomeia a iso criada acima com pacote b
	packed := d

	// 2 se criar o cabeçalho binario 2 byts
	header := network.NewBinary2BytesHeader()
	//header := network.NewASCII4BytesHeader()
	header.SetLength(len(packed))

	// 3 se criar o tpdu ELO
	//tpdu := []byte("60 00 06 00 00")

	// 4 - combinar tudo o que temos em um buf

	var buf bytes.Buffer

	header.WriteTo(&buf)
	//_, err = buf.Write(tpdu)
	_, err = buf.Write(packed)
	//_, err = Write(buf.Bytes())
	fmt.Printf("\n MENSAGEM ABERTA EBCDIC:\n")
	fmt.Printf("% x\n", packed)
	iso8583.Describe(new_message, os.Stdout)
	fmt.Printf("\n FIM DO PROCESSAMENTO :) \n")
	//fmt.Println("Pressione 'Enter' para sair...")
	//fmt.Scanln()
	//conn.Close()
	fmt.Println("\n MENSAGEM EBCDIC ENVIADA AO SERVIDOR:\n", buf.Bytes())
	return buf.Bytes(), err
}
