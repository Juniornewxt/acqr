package manipulaiso

import (

	//"encoding/csv"

	especificacao "autotrnsrvmc/especificacao"
	"bytes"
	"fmt"
	"os"
	"strings"
	"time"

	"github.com/moov-io/iso8583"
	//"github.com/moov-io/iso8583/cmd/iso8583/describe"

	//"github.com/moov-io/iso8583/specs"
	"github.com/moov-io/iso8583/network"
)

func Mciso400(iso_padrao []byte) ([]byte, error) {

	// 1 se renomeia a iso criada acima com pacote iso_padrao

	fmt.Println("PRINT DA FUNCAO MC", iso_padrao)

	// Remove os primeiros 2 bytes
	iso_padrao_mod := iso_padrao[2:]
	// Trabalha com string sem os 2 primeiros bytes
	retorno := string(iso_padrao_mod)

	r_spec := especificacao.NewSpecASCII()

	r_message := iso8583.NewMessage(r_spec)

	r_message.Unpack([]byte((retorno)))

	b, err := r_message.Pack()
	if err != nil {
		panic(err)

	}
	fmt.Printf("\n MENSAGEM RECEBIDA:\n")
	fmt.Printf("% x\n", b)
	fmt.Printf("\n MENSAGEM ABERTA ASCII:\n")
	iso8583.Describe(r_message, os.Stdout)

	// Inicia a criação da spec nova para que não se repita os dados da ISO original, salve quando solicitado r_message
	type IsoDe48sub struct {
		//MerchantName1        string `iso8583:"01"`
		MerchantCategoryCode string `iso8583:"14"`
		//Sub48_22i            *De48sub22 `iso8583:"22"`
		Sub48_20           string `iso8583:"20"`
		Sub48_22i          string `iso8583:"22"`
		MerchantPostalCode string `iso8583:"74"`
		MerchantWebsite    string `iso8583:"80"`
		Ard                string `iso8583:"91"`
	}
	type IsoDe48 struct {
		MerchantName1 string      `iso8583:"00"`
		MerchantName  *IsoDe48sub `iso8583:"01"`
	}
	type SolicitacaoAutorizacao struct {
		MTI               string   `iso8583:"0"`
		PAN               string   `iso8583:"2"`
		ProcCod           string   `iso8583:"3"`
		Valor             string   `iso8583:"4"`
		DataHoraTransacao string   `iso8583:"7"`
		STAN              string   `iso8583:"11"`
		Hhmmss            string   `iso8583:"12"`
		Mmdd              string   `iso8583:"13"`
		Validade          string   `iso8583:"14"`
		Mcc               string   `iso8583:"18"`
		EntryMode         string   `iso8583:"22"`
		SeqCardNum        string   `iso8583:"23"`
		Adquirente        string   `iso8583:"32"`
		CodInstiRemetente string   `iso8583:"33"`
		Trilha2           string   `iso8583:"35"`
		Nsu               string   `iso8583:"37"`
		CodCancel         string   `iso8583:"39"`
		Terminal          string   `iso8583:"41"`
		CodComercio       string   `iso8583:"42"`
		NomeEndereco      string   `iso8583:"43"`
		InfoAdd           *IsoDe48 `iso8583:"48"`
		Moeda             string   `iso8583:"49"`
		Pin               string   `iso8583:"52"`
		DadosChip         string   `iso8583:"55"`
		DadosPOS          string   `iso8583:"61"`
		DadosCanc         string   `iso8583:"90"`
		DadosRegistro     string   `iso8583:"120"`
		DadosPrivados     string   `iso8583:"126"`
	}

	new_spec := especificacao.NewSpecEBCDIC()

	new_message := iso8583.NewMessage(new_spec)

	r_message.Unpack(b) //Abre a ISO formatada no inicio para ser usada somente de alguns campos

	cartao, err := r_message.GetString(35)
	if err != nil {
		panic(err)
	}
	//Abre o DE 35, le ate = para encontrar o numero do cartão
	var num_cartao string
	for _, procura_cartao := range cartao {
		if procura_cartao == '=' {
			break
		}
		num_cartao += string(procura_cartao)
	}

	proccod, err := r_message.GetString(3)
	if err != nil {
		panic(err)
	}

	valor, err := r_message.GetString(4)
	if err != nil {
		panic(err)
	}
	mmddhhmmss, err := r_message.GetString(7)
	if err != nil {
		panic(err)
	}
	//new_message.Field(7, mmddhhmmss) //data e hora mmddhhmmss
	sy_trace, err := r_message.GetString(11)
	if err != nil {
		panic(err)
	}
	//new_message.Field(11, sy_trace)
	hhmmss, err := r_message.GetString(12)
	if err != nil {
		panic(err)
	}
	//new_message.Field(12, hhmmss) //hhmmss
	mmdd, err := r_message.GetString(13)
	if err != nil {
		panic(err)
	}
	//new_message.Field(13, mmdd) //mmdd
	validade, err := r_message.GetString(14)
	if err != nil {
		panic(err)
	}
	//new_message.Field(14, validade) //validade do cartao
	mcc, err := r_message.GetString(18)
	if err != nil {
		panic(err)
	}
	//new_message.Field(18, mcc) //mcc
	entrymode, err := r_message.GetString(22)
	if err != nil {
		panic(err)
	}
	//new_message.Field(22, entrymode) //entry mode
	//trilha2, err := r_message.GetString(35)
	//if err != nil {
	//	panic(err)
	//}
	//new_message.Field(35, trilha2) // trilha 2 cartao/ identificador/ validade/ cvv
	data := time.Now()
	//new_message.Field(37, strings.Replace((data.Format(("150405.000000"))), ".", "", -1))
	tid, err := r_message.GetString(41)
	if err != nil {
		panic(err)
	}
	//new_message.Field(41, tid) //terminal
	mid, err := r_message.GetString(42)
	if err != nil {
		panic(err)
	}
	//new_message.Field(42, mid) //cod comercio
	//new_message.Field(43, "POSTO DM JR            DIADEMA  EVANG076")
	moeda, err := r_message.GetString(49)
	if err != nil {
		panic(err)
	}
	//new_message.Field(49, moeda) //moeda
	de55, err := r_message.GetString(55)
	if err != nil {
		panic(err)
	}
	//new_message.Field(55, de55) //dados do chip
	posdata, err := r_message.GetString(61)
	if err != nil {
		panic(err)
	}
	dadoscanc, err := r_message.GetString(90)
	if err != nil {
		panic(err)
	}

	pedidoautoriza := &SolicitacaoAutorizacao{} //Absorve a estrutura do SolicitacaoAutorizacao para o pedidoautoriza
	pedidoautoriza.MTI = "0400"
	pedidoautoriza.PAN = num_cartao
	pedidoautoriza.ProcCod = proccod
	pedidoautoriza.Valor = valor
	pedidoautoriza.DataHoraTransacao = mmddhhmmss
	pedidoautoriza.STAN = sy_trace
	pedidoautoriza.Hhmmss = hhmmss
	pedidoautoriza.Mmdd = mmdd
	pedidoautoriza.Validade = validade
	pedidoautoriza.Mcc = mcc
	pedidoautoriza.EntryMode = entrymode
	if entrymode == "51" || entrymode == "71" { //ou 51 ou 71, fora esses nao vai o DE23
		pedidoautoriza.SeqCardNum = "001"
	}
	pedidoautoriza.Adquirente = "00000000025"
	pedidoautoriza.CodInstiRemetente = "0026"
	//pedidoautoriza.Trilha2 = trilha2
	pedidoautoriza.Nsu = (strings.Replace((data.Format(("150405.000000"))), ".", "", -1))
	pedidoautoriza.CodCancel = "30"
	pedidoautoriza.Terminal = tid
	pedidoautoriza.CodComercio = mid
	pedidoautoriza.NomeEndereco = "POSTO DM JR            DIADEMA  EVANG076"

	pedidoautoriza.InfoAdd = &IsoDe48{
		MerchantName1: "F",
		MerchantName: &IsoDe48sub{
			//MerchantCategoryCode=" ",
			//Sub48_22i=&De48sub22{
			//Sub48_22="0000",
			//Sub48_22i="0000000000000000000000000000000000",
			//},
			//MerchantPostalCode="50C",
			//MerchantWebsite=   "TV",
			//Ard=               "111111111111111",
			Sub48_20: "S", //P = Online PIN verification //S = Can signify signature, “Offline PIN verification” (for chip transactions), “M-PIN”(for Mobile Device with PIN entry capability) or “No CVM used”
		},
	}
	pedidoautoriza.Moeda = moeda
	if entrymode == "51" || entrymode == "21" { //ou 51 ou 21
		pedidoautoriza.Pin = "FEE8CA6A"
	}
	if entrymode == "51" || entrymode == "71" {
		pedidoautoriza.DadosChip = de55
	}
	pedidoautoriza.DadosPOS = posdata
	pedidoautoriza.DadosCanc = dadoscanc
	//pedidoautoriza.DadosRegistro = De120
	//pedidoautoriza.DadosPrivados = De126

	err = new_message.Marshal(pedidoautoriza)

	d, err := new_message.Pack()
	if err != nil {
		panic(err)

	}

	// 1 se renomeia a iso criada acima com pacote b
	packed := d

	// 2 se criar o cabeçalho binario 2 byts
	header := network.NewBinary2BytesHeader()
	//header := network.NewASCII4BytesHeader()
	header.SetLength(len(packed))

	// 3 se criar o tpdu ELO
	//tpdu := []byte("60 00 06 00 00")

	// 4 - combinar tudo o que temos em um buf

	var buf bytes.Buffer

	header.WriteTo(&buf)
	//_, err = buf.Write(tpdu)
	_, err = buf.Write(packed)
	//_, err = Write(buf.Bytes())
	fmt.Printf("\n MENSAGEM ABERTA EBCDIC:\n")
	fmt.Printf("% x\n", packed)
	iso8583.Describe(new_message, os.Stdout)
	fmt.Printf("\n FIM DO PROCESSAMENTO :) \n")
	//fmt.Println("Pressione 'Enter' para sair...")
	//fmt.Scanln()
	//conn.Close()
	fmt.Println("\n MENSAGEM EBCDIC ENVIADA AO SERVIDOR:\n", buf.Bytes())
	return buf.Bytes(), err
}
